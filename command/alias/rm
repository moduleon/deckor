#!/bin/bash

set -e

SCRIPT_DIR="$(dirname $(realpath $0))"

source $SCRIPT_DIR/../../utils/output
source $SCRIPT_DIR/../../utils/constraints

function print_help () {
    styled_text $(basename $0) $BOLD; write_line ": Remove command alias set for the current directory"
    new_line
    write_line "Usage: $(basename $0) <alias>"
    write_line "   Or: $(basename $0) OPTIONS"
    new_line
    section "Options :"
    option "-h, --help" "    Display this help"
    option "-s, --silent" "  Run without output (by default, no)"
    option "-r, --reload" "  Reload the current shell (by default, no)"
}

# No args, print help
if [ $# -eq 0 ]; then
    print_help
    exit 1
fi

# Parse options
SILENT=0
RELOAD=0
for var in "$@"
do
    shift
    case $var in
        -h|--help)
            print_help
            exit 0
        ;;
        -s|--silent)
            SILENT=1
        ;;
        -r|--reload)
            RELOAD=1
        ;;
        *)
            set -- "$@" "$var"
        ;;
    esac
done

# Check arguments
ALIAS="$1"
check_if_exists alias $ALIAS

# Create rc file if missing
SHELL_NAME=$(basename $SHELL)
if [ ! -f ~/.${SHELL_NAME}rc ]; then
    touch ~/.${SHELL_NAME}rc
fi

# Remove placeholding condition if set
LINE=$(grep -n "#${ALIAS}-anchor-${PWD}" ~/.${SHELL_NAME}rc | cut -d : -f 1)
if [ ! -z "$LINE" ]; then
    if [ "$(uname)" == "Darwin" ]; then
        sed -i '' "${LINE}d" ~/.${SHELL_NAME}rc
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        sed -i "${LINE}d" ~/.${SHELL_NAME}rc
    fi
fi

if [ $SILENT -eq 0 ]; then
    success_message "Alias '$ALIAS' successfully removed for $PWD!"
fi

# Reload current shell
if [ $RELOAD -eq 1 ]; then
    exec $SHELL
fi
